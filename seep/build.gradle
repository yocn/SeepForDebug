apply plugin: 'com.android.library'
apply plugin: 'com.novoda.bintray-release'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

if (getGradle().getStartParameter().getTaskRequests().toString().contains("assemble")) {
    processConfig()
}

apply plugin: 'android-aspectjx'

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'joda-time:joda-time:2.9.6'
    implementation 'com.google.android.material:material:1.2.1'
}

publish {
    userOrg = 'yocn'//bintray.com用户名，右上角
    groupId = 'com.yocn'//jcenter上的路径
    artifactId = 'seep'//项目名称
    publishVersion = '1.2.1.alpha'//版本号
    desc = 'Oh hi, this is a nice description for a project, right?'//描述，不重要
    website = 'https://github.com/yocn/SeepForDebug'//网站，不重要；尽量模拟github上的地址，例如我这样的；当然你有地址最好了
}

def processConfig() {
    def manifest = new XmlParser().parse(new File("app/src/main/AndroidManifest.xml"))
    getMainActivityTask(manifest)
    modifyAspectClass(manifest)
}

def modifyAspectClass(Node manifest) {
    def srcSeepPath = rootProject.rootDir.path + "/seep/src/main/seepTmp/SeepAspect.java"
    def tarSeepPath = rootProject.rootDir.path + "/seep/src/main/java/com/yocn/seep/SeepAspect.java"
    def entrance
    def back
    def get
    def post
    manifest.each { Node node ->
        if (node.name() == "application") {
            node.each { Node child ->
                if (child.name() == "meta-data") {
                    def attr1 = child.attributes().values().toList().get(0)
                    def attr2 = child.attributes().values().toList().get(1)
                    def entranceTmp = getValue("SEEP_UI_ENTRANCE", attr1, attr2)
                    def backTmp = getValue("SEEP_UI_BACK", attr1, attr2)
                    def getTmp = getValue("SEEP_NET_GET", attr1, attr2)
                    def postRmp = getValue("SEEP_NET_POST", attr1, attr2)
                    if (entranceTmp != null) {
                        entrance = entranceTmp
                    } else if (backTmp != null) {
                        back = backTmp
                    } else if (getTmp != null) {
                        get = getTmp
                    } else if (postRmp != null) {
                        post = postRmp
                    }
                }
            }
        }
    }
    def list = []
    new File(srcSeepPath).withReader('UTF-8') { reader ->
        reader.eachLine {
//            println it
            if (it.contains('[placeholderUIEntrance]')) {
                it = it.replace("[placeholderUIEntrance]", entrance)
            } else if (it.contains('[placeholderBack]')) {
                it = it.replace('[placeholderBack]', back)
            } else if (it.contains('[placeholderGet]')) {
                it = it.replace('[placeholderGet]', get)
            } else if (it.contains('[placeholderPost]')) {
                it = it.replace('[placeholderPost]', post)
            }
            list.add(it + "\n")
        }
    }
    new File(tarSeepPath).withWriter('UTF-8') { writer ->
        list.each {
//            println it
            writer.write(it)
        }
    }
}

def getValue(String target, String s1, String s2) {
    if (s1 == target) {
        return s2
    }
    if (s2 == target) {
        return s1
    }
}

def getMainActivityTask(Node manifest) {
    def packageName = manifest.attributes().get("package")
    def activityName
    // 找到application节点
    def applicationNodeList = manifest.get("application").asType(NodeList.class)

    // 找到所有的activity节点
    def activityNodeList = applicationNodeList.getAt("activity")
    activityNodeList.each { activityNode ->
        def intentFilterList = activityNode.getAt("intent-filter")
        if (intentFilterList != null) {
            for (int i = 0; i < intentFilterList.size(); i++) {
                def intentFilter = intentFilterList.get(i)
                def actionList = intentFilter.getAt("action")
                def categoryList = intentFilter.getAt("category")
                if (actionList.toString().contains("android.intent.action.MAIN")
                        && categoryList.toString().contains("android.intent.category.LAUNCHER")) {
                    activityNode.attributes().each { attr ->
                        if (attr.toString().contains("name=")) {
                            activityName = attr.toString().substring(attr.toString().lastIndexOf("."), attr.toString().length())
                        }
                    }
                    break
                }
            }
        }
    }

    println "packageName::::::::" + packageName + activityName
    return packageName + activityName
}